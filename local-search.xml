<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>[转载]GitBook 从懵逼到入门</title>
    <link href="/pages/2023/%5B%E8%BD%AC%E8%BD%BD%5DGitBook%20%E4%BB%8E%E6%87%B5%E9%80%BC%E5%88%B0%E5%85%A5%E9%97%A8.html"/>
    <url>/pages/2023/%5B%E8%BD%AC%E8%BD%BD%5DGitBook%20%E4%BB%8E%E6%87%B5%E9%80%BC%E5%88%B0%E5%85%A5%E9%97%A8.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>转载自：GitBook 从懵逼到入门</p><p>原文链接：<a href="https://blog.csdn.net/lu_embedded/article/details/81100704">https://blog.csdn.net/lu_embedded&#x2F;article&#x2F;details&#x2F;81100704</a></p></blockquote><p>本文从 <strong>“是什么”</strong>、<strong>“为什么”</strong>、<strong>“怎么办”</strong>、<strong>“好不好”</strong> 四个维度来介绍 GitBook，带你从黑暗之中走出来，get 这种美妙的写作方式。</p><hr><h1 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h1><p>在我认识 GitBook 之前，我已经在使用 Git 了，毋容置疑，Git 是目前世界上最先进的分布式版本控制系统。</p><p>我认为 Git 不仅是程序员管理代码的工具，它的分布式协作方式同样适用于很多场合，其中一个就是写作（这会是一个引起社会变革的伟大的工具！）。所以在我发现 GitBook 之前，实际上我已经无数次想象过它的使用场景了。</p><p>咋一看 GitBook 的名字，你可能会认为它是关于 Git 的一本书。而当你有所了解之后，你也许会认为它是一个使用 Git 构建电子书的工具。其实不然，GitBook 与 Git 的关系，就像雷锋塔和雷锋那样，没有一点关系！</p><p>实际上，GitBook 是一个基于 Node.js 的命令行工具，支持 Markdown 和 AsciiDoc 两种语法格式，可以输出 HTML、PDF、eBook 等格式的电子书。所以我更喜欢把 GitBook 定义为文档格式转换工具。<br>　　<br>所以，GitBook 不是 Markdown 编辑工具，也不是 Git 版本管理工具。市面上我们可以找到很多 Markdown 编辑器，比如 Typora、MacDown、Bear、MarkdownPad、MarkdownX、JetBrains’s IDE（需要安装插件）、Atom、简书、CSDN 以及 GitBook 自家的 GitBook Editor 等等。</p><img src="/pages/2023/%5B%E8%BD%AC%E8%BD%BD%5DGitBook%20%E4%BB%8E%E6%87%B5%E9%80%BC%E5%88%B0%E5%85%A5%E9%97%A8/70pic_center.png" class="" title="这里写图片描述"><p><strong>但 GitBook 又与 Markdown 和 Git 息息相关</strong>，因为只有将它们结合起来使用，才能将它们的威力发挥到极致！因此，通常我们会选择合适的 Markdown 编辑工具以获得飞一般的写作体验；使用 GitBook 管理文档，预览、制作电子书；同时通过 Git 管理书籍内容的变更，并将其托管到云端（比如 GitHub、GitLab、码云，或者是自己搭建的 Git 服务器），实现多人协作。</p><p>实际上，GitBook Editor 对于新手来说是个不错的选择，它集成了 GitBook、Git、Markdown 等功能，还支持将书籍同步到 gitbook.com 网站，使我们可以很方便地编辑和管理书籍。但是不幸的是，GitBook Editor 的注册和登录需要翻墙，即便注册成功了也可能登录不上，似乎是因为网站最近在升级。</p><p>因此，我推荐，也是我目前使用的搭配是 GitBook + Typora + Git。</p><hr><h1 id="为什么？"><a href="#为什么？" class="headerlink" title="为什么？"></a>为什么？</h1><p>通常，我们最开始学习和使用的办公软件就是 Word、Excel 和 PowerPoint。这里不是说它们已经过时了，不是说 GitBook 能够替代它们。</p><p>相反，Microsoft 的办公软件很优秀并且经受了时间的考验，但是正因为它功能丰富，导致稍显臃肿（二八定律：80%的时间里我们只会只用20%的功能），同时因为它存在以二进制格式保存、软件不兼容、格式不兼容、难以进行版本控制、难以实时分享预览、难以多人协作等短板。而这恰恰是 GitBook + Markdown + Git 的长处。</p><p>简单来说，GitBook + Markdown + Git 带来的好处有：</p><blockquote><ul><li>语法简单</li><li>兼容性强</li><li>导出方便</li><li>专注内容</li><li>团队协作</li></ul></blockquote><p>所以，如果你和我一样，不满足于传统的写作方式，正在寻找一种令人愉悦的写作方式，那么该尝试使用 GitBook 啦！</p><p>当然，GitBook 不是万能的，当我们需要复杂排版时，依然需要依托于 Word 等工具。但不用担心，因为我们可以把 Markdown 格式的文档导出为 Word 格式，再进一步加工。</p><hr><h1 id="怎么办？"><a href="#怎么办？" class="headerlink" title="怎么办？"></a>怎么办？</h1><h2 id="怎么安装"><a href="#怎么安装" class="headerlink" title="怎么安装"></a>怎么安装</h2><p>当你听了我的怂恿，并决定尝试使用 GitBook 的时候，首先面临的问题是 —— 如何搭建 GitBook 环境？</p><p>因为 GitBook 是基于 Node.js，所以我们首先需要安装 Node.js（下载地址：<a href="https://nodejs.org/en/download/%EF%BC%89%EF%BC%8C%E6%89%BE%E5%88%B0%E5%AF%B9%E5%BA%94%E5%B9%B3%E5%8F%B0%E7%9A%84%E7%89%88%E6%9C%AC%E5%AE%89%E8%A3%85%E5%8D%B3%E5%8F%AF%E3%80%82">https://nodejs.org/en/download/），找到对应平台的版本安装即可。</a></p><p>现在安装 Node.js 都会默认安装 npm（node 包管理工具），所以我们不用单独安装 npm，打开命令行，执行以下命令安装 GitBook：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g gitbook-cli<br></code></pre></td></tr></table></figure><p>安装完之后，就会多了一个 <code>gitbook</code> 命令（如果没有，请确认上面的命令是否加了<code> -g</code>）。</p><p>上面我推荐的是 GitBook + Typora + Git，所以你还需要安装 Typora（一个很棒的支持 macOS、Windows、Linux 的 Markdown 编辑工具）和 Git 版本管理工具。戳下面：</p><blockquote><ul><li>Typora 下载地址：<a href="https://typora.io/">https://typora.io/</a></li><li>Git 下载地址：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></li></ul></blockquote><p>Typora 的安装很简单，难点在于需要翻墙才能下载（当然你也可以找我要）。Git 的安装也很简单，但要用好它需要不少时间，这里就不展开了（再讲下去怕你要跑啦~）。</p><h2 id="怎么使用"><a href="#怎么使用" class="headerlink" title="怎么使用"></a>怎么使用</h2><p>想象一下，现在你准备构建一本书籍，你在硬盘上新建了一个叫 mybook 的文件夹，按照以前的做法，你会新建一个 Word 文档，写上标题，然后开始巴滋巴滋地笔耕。但是现在有了 GitBook，你首先要做的是在 mybook 文件夹下执行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gitbook init<br></code></pre></td></tr></table></figure><p>执行完后，你会看到多了两个文件 —— <code>README.md</code> 和 <code>SUMMARY.md</code>，它们的作用如下：</p><blockquote><ul><li><p>README.md —— 书籍的介绍写在这个文件里</p></li><li><p>SUMMARY.md —— 书籍的目录结构在这里配置</p></li></ul></blockquote><p>这时候，我们启动恭候多时的 Typora 来编辑这两个文件了：</p><img src="/pages/2023/%5B%E8%BD%AC%E8%BD%BD%5DGitBook%20%E4%BB%8E%E6%87%B5%E9%80%BC%E5%88%B0%E5%85%A5%E9%97%A8/70pic_center-1673382602279-3.png" class="" title="这里写图片描述"><p>编辑 SUMMARY.md 文件，内容修改为：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs markdown"> 目录<br><br><span class="hljs-bullet">*</span> [<span class="hljs-string">前言</span>](<span class="hljs-link">README.md</span>)<br><span class="hljs-bullet">*</span> [<span class="hljs-string">第一章</span>](<span class="hljs-link">Chapter1/README.md</span>)<br><span class="hljs-bullet">  *</span> [<span class="hljs-string">第1节：衣</span>](<span class="hljs-link">Chapter1/衣.md</span>)<br><span class="hljs-bullet">  *</span> [<span class="hljs-string">第2节：食</span>](<span class="hljs-link">Chapter1/食.md</span>)<br><span class="hljs-bullet">  *</span> [<span class="hljs-string">第3节：住</span>](<span class="hljs-link">Chapter1/住.md</span>)<br><span class="hljs-bullet">  *</span> [<span class="hljs-string">第4节：行</span>](<span class="hljs-link">Chapter1/行.md</span>)<br><span class="hljs-bullet">*</span> [<span class="hljs-string">第二章</span>](<span class="hljs-link">Chapter2/README.md</span>)<br><span class="hljs-bullet">*</span> [<span class="hljs-string">第三章</span>](<span class="hljs-link">Chapter3/README.md</span>)<br><span class="hljs-bullet">*</span> [<span class="hljs-string">第四章</span>](<span class="hljs-link">Chapter4/README.md</span>)<br></code></pre></td></tr></table></figure><p>然后我们回到命令行，在 mybook 文件夹中再次执行<code>gitbook init</code>命令。GitBook 会查找 SUMMARY.md 文件中描述的目录和文件，如果没有则会将其创建。</p><p>Typora 是所见即所得（实时渲染）的 Markdown 编辑器，这时候它是这样的：</p><img src="/pages/2023/%5B%E8%BD%AC%E8%BD%BD%5DGitBook%20%E4%BB%8E%E6%87%B5%E9%80%BC%E5%88%B0%E5%85%A5%E9%97%A8/70pic_center-1673382683180-6.png" class="" title="这里写图片描述"><p>接着我们执行 <code>gitbook serve</code> 来预览这本书籍，执行命令后会对 Markdown 格式的文档进行转换，默认转换为 html 格式，最后提示 <code>“Serving book on http://localhost:4000”</code>。嗯，打开浏览器看一下吧：</p><img src="/pages/2023/%5B%E8%BD%AC%E8%BD%BD%5DGitBook%20%E4%BB%8E%E6%87%B5%E9%80%BC%E5%88%B0%E5%85%A5%E9%97%A8/70pic_center-1673382707860-9.png" class="" title="这里写图片描述"><p>当你写得差不多，你可以执行 <code>gitbook build</code> 命令构建书籍，默认将生成的静态网站输出到 <code>_book</code> 目录。实际上，这一步也包含在 <code>gitbook serve</code> 里面，因为它们是 HTML，所以 GitBook 通过 Node.js 给你提供服务了。</p><p>当然，build 命令可以指定路径：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gitbook build [书籍路径] [输出路径]<br></code></pre></td></tr></table></figure><p>serve 命令也可以指定端口：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gitbook serve --port 2333<br></code></pre></td></tr></table></figure><p>你还可以生成 PDF 格式的电子书：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gitbook pdf ./ ./mybook.pdf<br></code></pre></td></tr></table></figure><p>生成 epub 格式的电子书：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">gitbook epub .<span class="hljs-regexp">/ ./my</span>book.epub<br></code></pre></td></tr></table></figure><p>生成 mobi 格式的电子书：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">gitbook mobi .<span class="hljs-regexp">/ ./my</span>book.mobi<br></code></pre></td></tr></table></figure><p>如果生成不了，你可能还需要安装一些工具，比如 ebook-convert。或者在 Typora 中安装 Pandoc 进行导出。</p><p>除此之外，别忘了还可以用 Git 做版本管理呀！在 mybook 目录下执行 <code>git init</code> 初始化仓库，执行 <code>git remote add</code> 添加远程仓库（你得先在远端建好）。接着就可以愉快地 commit，push，pull … 啦！</p><p>不是程序员的小伙伴可能不太喜欢用命令行，那其实版本管理这部分可以下载安装 Git 或 GitHub 这些客户端程序，在图形界面上操作也是可以完成工作的。<br>————————————————<br>版权声明：本文为CSDN博主「阿基米东」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/lu_embedded/article/details/81100704">https://blog.csdn.net/lu_embedded/article/details/81100704</a></p>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
      <category>gitbook</category>
      
    </categories>
    
    
    <tags>
      
      <tag>gitbook</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>打造RSS信息流：rsshub+miniflux+fluent reader lite</title>
    <link href="/pages/2023/%E6%89%93%E9%80%A0RSS%E4%BF%A1%E6%81%AF%E6%B5%81%EF%BC%9Arsshub-miniflux-fluent-reader-lite.html"/>
    <url>/pages/2023/%E6%89%93%E9%80%A0RSS%E4%BF%A1%E6%81%AF%E6%B5%81%EF%BC%9Arsshub-miniflux-fluent-reader-lite.html</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><ul><li>rsshub：部署在云上，将信息源转换为rss</li><li>miniflux：部署在云上，管理rss内容</li><li>fluent reader lite：本地，用户界面</li></ul><h2 id="部署rsshub"><a href="#部署rsshub" class="headerlink" title="部署rsshub"></a>部署rsshub</h2><p><a href="https://docs.rsshub.app/install/#docker-jing-xiang">文档</a></p>]]></content>
    
    
    <categories>
      
      <category>RSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[转载] GitHubDesktop通过ssh连接Github</title>
    <link href="/pages/2023/%5B%E8%BD%AC%E8%BD%BD%5DGitHubDesktop%E9%80%9A%E8%BF%87ssh%E8%BF%9E%E6%8E%A5Github.html"/>
    <url>/pages/2023/%5B%E8%BD%AC%E8%BD%BD%5DGitHubDesktop%E9%80%9A%E8%BF%87ssh%E8%BF%9E%E6%8E%A5Github.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>转载自：GitHubDesktop通过ssh连接Github</p><p>原文链接：<a href="https://blog.csdn.net/Leo_DLi/article/details/126281321">https://blog.csdn.net/Leo_DLi&#x2F;article&#x2F;details&#x2F;126281321</a></p></blockquote><p>首先，通过 ssh 连接的好处在于不必每次都要验证GitHub的账号密码，减少了一些繁琐的操作，同时可以提高 pull&#x2F;push 的效率，特别是在网络比较差劲，无法通过 http 或 https 有效连接到GitHub时，ssh 就是一个不错的选择。</p><p>言归正传</p><h1 id="一，生成-ssh"><a href="#一，生成-ssh" class="headerlink" title="一，生成 ssh"></a>一，生成 ssh</h1><p>打开cmd，键入以下指令，会在指定目录下生成 .ssh文件夹（<code>.</code>开头的隐藏文件怎么查看，请自行查找方法）。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh-keygen -t rsa -C &quot;xxxxx@xx.com&quot;<br></code></pre></td></tr></table></figure><p>回车之后，一般会在 <code>C:\Users\用户名\.ssh</code> 位置生成一个名为 .ssh 的文件夹。</p><p>该文件中的 <code>id_rsa.pub</code> 文件中存放的就是公钥。</p><p>打开该文件（可通过记事本方式打开），复制出公钥。</p><h1 id="二，进入GitHub官网，设置你的公钥。"><a href="#二，进入GitHub官网，设置你的公钥。" class="headerlink" title="二，进入GitHub官网，设置你的公钥。"></a>二，进入GitHub官网，设置你的公钥。</h1><p>参考如下截图：</p><img src="/pages/2023/%5B%E8%BD%AC%E8%BD%BD%5DGitHubDesktop%E9%80%9A%E8%BF%87ssh%E8%BF%9E%E6%8E%A5Github/af3788be23574429be4dfc6ad51fb2b0.png" class="" title="img"><img src="/pages/2023/%5B%E8%BD%AC%E8%BD%BD%5DGitHubDesktop%E9%80%9A%E8%BF%87ssh%E8%BF%9E%E6%8E%A5Github/4883cd509f744a49b4be97423ee35b7a.png" class="" title="img"><img src="/pages/2023/%5B%E8%BD%AC%E8%BD%BD%5DGitHubDesktop%E9%80%9A%E8%BF%87ssh%E8%BF%9E%E6%8E%A5Github/c1902fffd2cf4b9f911972bbcb35c6f3.png" class="" title="img"><img src="/pages/2023/%5B%E8%BD%AC%E8%BD%BD%5DGitHubDesktop%E9%80%9A%E8%BF%87ssh%E8%BF%9E%E6%8E%A5Github/7821524963d04eb493f6f140f9273e09.png" class="" title="img"><p>Title：自己起一个有高分辨率的名字。</p><p>Key：就是你刚刚复制的 <code>id_rsa.pub</code> 文件中的内容。</p><p>配置好之后，Github 远程仓库，就可以和你的电脑通过 ssh 进行连接了。接下来，需要在 GitHubDesktop 软件中配置来使用 ssh。</p><h1 id="三，GitHubDesktop配置。"><a href="#三，GitHubDesktop配置。" class="headerlink" title="三，GitHubDesktop配置。"></a>三，GitHubDesktop配置。</h1><p>还是读图：</p><img src="/pages/2023/%5B%E8%BD%AC%E8%BD%BD%5DGitHubDesktop%E9%80%9A%E8%BF%87ssh%E8%BF%9E%E6%8E%A5Github/757aec976ed24f3394cd4302d58988a4.png" class="" title="img"><img src="/pages/2023/%5B%E8%BD%AC%E8%BD%BD%5DGitHubDesktop%E9%80%9A%E8%BF%87ssh%E8%BF%9E%E6%8E%A5Github/fe3fdd0c327e46ed809a99aaafad66ce.png" class="" title="img"><p>在 Remote 中将 原来的 https:xxx.git 替换为这里的 <a href="mailto:&#x67;&#x69;&#x74;&#64;&#120;&#120;&#x78;&#120;&#x78;&#x2e;&#103;&#105;&#116;">&#x67;&#x69;&#x74;&#64;&#120;&#120;&#x78;&#120;&#x78;&#x2e;&#103;&#105;&#116;</a> 然后 save 就可以了。</p><p>接下来就可以愉快的开始 pull&#x2F;push 了。<br>————————————————<br>版权声明：本文为CSDN博主「Leo_DLi」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/Leo_DLi/article/details/126281321">https://blog.csdn.net/Leo_DLi/article/details/126281321</a></p>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
      <category>Github</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GithubDesktop</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[转载] Win10 Vmware Workstation 16 安装 macOS 记录</title>
    <link href="/pages/2023/%5B%E8%BD%AC%E8%BD%BD%5D-Win10-Vmware-Workstation-16-%E5%AE%89%E8%A3%85-macOS-%E8%AE%B0%E5%BD%95.html"/>
    <url>/pages/2023/%5B%E8%BD%AC%E8%BD%BD%5D-Win10-Vmware-Workstation-16-%E5%AE%89%E8%A3%85-macOS-%E8%AE%B0%E5%BD%95.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>转载自：Win10 Vmware Workstation 16 安装 macOS 记录</p><p>原文链接：<a href="https://kiprey.github.io/2021/12/vmware_macos/">https://kiprey.github.io/2021/12/vmware_macos&#x2F;</a></p></blockquote><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>这里记录了我在 Win10 VMware workstation 上配置 macOS 虚拟机所踩过的坑点。</p><h2 id="二、MacOS-安装"><a href="#二、MacOS-安装" class="headerlink" title="二、MacOS 安装"></a>二、MacOS 安装</h2><ul><li><p>首先，下载 VMware 解锁 MacOS 选项的补丁。</p><blockquote><p>“解锁 MacOS” 的这个说法其实个人感觉不是特别直接。</p><p>这个补丁的用途是<strong>让 VMware 额外支持 MacOS</strong>。</p></blockquote><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">COPYgit <span class="hljs-keyword">clone</span> <span class="hljs-title">git</span>@github.com:BDisp/unlocker.git<br></code></pre></td></tr></table></figure><p>之后，去任务管理器中，<strong>强制退出所有 VMware 开头的进程</strong>，防止补丁失败：</p><img src="/pages/2023/%5B%E8%BD%AC%E8%BD%BD%5D-Win10-Vmware-Workstation-16-%E5%AE%89%E8%A3%85-macOS-%E8%AE%B0%E5%BD%95/image-20211213105750235.png" class="" title="image-20211213105750235"><p>之后<strong>管理员执行</strong> <code>win-install.cmd</code>。执行时脚本会去 vmware 官网上下载一些东西，时间取决于网络条件。</p><p>执行完成后，<strong>重启电脑</strong>或手动去 <strong>服务</strong> 底下打开 <strong>VMware NAT Service</strong> 和 <strong>VMware VMnet DHCP service</strong> 服务，否则<strong>虚拟机将无法连接网络</strong>。</p><blockquote><p>坑点：之前忘记重启网络服务了…</p></blockquote></li><li><p>接着，去 Vmware 上新建虚拟机，并指定光盘映像文件为下载下来的 ISO&#x2F;CDR 文件：</p><img src="/pages/2023/%5B%E8%BD%AC%E8%BD%BD%5D-Win10-Vmware-Workstation-16-%E5%AE%89%E8%A3%85-macOS-%E8%AE%B0%E5%BD%95/image-20211213111248818.png" class="" title="image-20211213111248818"><p>然后选择 <code>Apple Mac OS X</code>，并一路 next 下去。磁盘大小建议 <strong>至少分配70GB</strong>。</p><blockquote><p>如果此时 VMware 里没有这个选项，则说明安装 VMware 补丁失败，需要重新安装最新版的补丁。</p></blockquote><img src="/pages/2023/%5B%E8%BD%AC%E8%BD%BD%5D-Win10-Vmware-Workstation-16-%E5%AE%89%E8%A3%85-macOS-%E8%AE%B0%E5%BD%95/image-20211213111314996.png" class="" title="image-20211213111314996"></li><li><p>虚拟机建立好后，启动虚拟机。在<strong>磁盘工具</strong>处：</p><img src="/pages/2023/%5B%E8%BD%AC%E8%BD%BD%5D-Win10-Vmware-Workstation-16-%E5%AE%89%E8%A3%85-macOS-%E8%AE%B0%E5%BD%95/image-20211213112904276.png" class="" title="image-20211213112904276"><p>将 Vmware 磁盘抹掉（格式化），不然安装 macOS 时将无法访问到 VMware 磁盘：</p><img src="/pages/2023/%5B%E8%BD%AC%E8%BD%BD%5D-Win10-Vmware-Workstation-16-%E5%AE%89%E8%A3%85-macOS-%E8%AE%B0%E5%BD%95/image-20211213113011006.png" class="" title="image-20211213113011006"><p>抹掉时改个磁盘名称就可以，其他的都不用动：</p><img src="/pages/2023/%5B%E8%BD%AC%E8%BD%BD%5D-Win10-Vmware-Workstation-16-%E5%AE%89%E8%A3%85-macOS-%E8%AE%B0%E5%BD%95/image-20211213113058440.png" class="" title="image-20211213113058440"><p>格式化磁盘后，在上方 <strong>实用工具-&gt;终端</strong>：</p><img src="/pages/2023/%5B%E8%BD%AC%E8%BD%BD%5D-Win10-Vmware-Workstation-16-%E5%AE%89%E8%A3%85-macOS-%E8%AE%B0%E5%BD%95/image-20211213113304952.png" class="" title="image-20211213113304952"><p>键入 <code>csrutil disable</code> 禁用系统完整性保护：</p><blockquote><p>因为系统完整性保护会限制 root 权限的行为。</p></blockquote><img src="/pages/2023/%5B%E8%BD%AC%E8%BD%BD%5D-Win10-Vmware-Workstation-16-%E5%AE%89%E8%A3%85-macOS-%E8%AE%B0%E5%BD%95/image-20211213113443227.png" class="" title="image-20211213113443227"><p>之后键入 <code>csrutil authenticated-root disable</code> 以关闭 Authenticated-root 保护。该保护会使得 MacOS 在引导期间，将一个被加密签名后的<strong>只读根文件系统快照挂载进根目录</strong>，因此我们需要禁用它以便于修改根路径或系统路径下的文件等。</p><blockquote><p>如果还是不行，则在 MacOS 安装完成后，执行 <code>sudo mount -uw /</code> 试试，注意该指令只在本次开机时有效，下次开机需要重新设置。</p></blockquote><p>接下来照常安装 MacOS 即可。</p></li><li><p>MacOS 安装完成后。<strong>不要马上启动！不要马上启动！不要马上启动！</strong></p><p>要先在该 MacOS 的 vmx 文件末尾追加 <code>smc.version = 0</code>，防止虚拟机出现错误。</p><p>追加完成后再启动。</p></li><li><p>启动新安装的 MacOS，之后一定要<strong>立即升级当前安装的 MacOS 系统</strong>（12GB左右）。因为 Apple 对远古版本的 MacOS 支持性非常低，就连安装软件都会有限制。</p><p>一定要在完成 MacOS 系统升级后，再去装各类软件以及 IDE 等等。</p><p>最好先安装当前远古版本 MacOS 系统的一些补丁，再去升级 MacOS 系统，不然可能有一定概率会升级失败。</p><blockquote><p>我这边更新到的版本是 <code>macOS Monterey 12.0.1</code>。</p></blockquote></li></ul><h2 id="三、安装各类软件"><a href="#三、安装各类软件" class="headerlink" title="三、安装各类软件"></a>三、安装各类软件</h2><ol><li><p>vmtools。右键虚拟机并点击 <strong>安装 Vmware Tools</strong>，然后根据步骤一步步来就好。</p><img src="/pages/2023/%5B%E8%BD%AC%E8%BD%BD%5D-Win10-Vmware-Workstation-16-%E5%AE%89%E8%A3%85-macOS-%E8%AE%B0%E5%BD%95/image-20211213120226602.png" class="" title="image-20211213120226602"></li><li><p>AppStore 上安装</p><ol><li>DevCleaner for xcode：释放 Xcode 缓存文件。</li><li>xcode（12GB左右）。不用多说。</li><li>超级右键。扩展一下自己的右键菜单，使得支持<strong>右键打开终端操作</strong>。</li></ol></li><li><p>下载 <a href="https://bjango.com/mac/istatmenus/">iStat Menus6</a>。这是 MacOS 上的一个系统监测软件，需要付费，可用序列号如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">COPYEmail</span>: <span class="hljs-number">982092332</span>@qq.com<br><span class="hljs-attribute">SN</span>: GAWAE-FCWQ3-P8NYB-C7GF7-NEDRT-Q5DTB-MFZG6-<span class="hljs-number">6</span>NEQC-CRMUD-<span class="hljs-number">8</span>MZ2K-<span class="hljs-number">66</span>SRB-SU8EW-EDLZ9-TGH3S-<span class="hljs-number">8</span>SGA<br><br><span class="hljs-attribute">ref</span>: http://www.pc6.com/mac/<span class="hljs-number">111587</span>.html<br></code></pre></td></tr></table></figure></li><li><p>安装homebrew 包管理器</p><blockquote><p>安装 homebrew 时需要<strong>多次输入密码</strong>，切记别走开。</p></blockquote><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">COPY</span><span class="hljs-comment"># 安装 homebrew</span><br>/<span class="hljs-string">bin</span>/<span class="hljs-string">bash</span> -<span class="hljs-string">c</span> <span class="hljs-string">&quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;</span><br><span class="hljs-comment"># 配置国内 brew 源</span><br><span class="hljs-string">cd</span> <span class="hljs-string">&quot;$(brew --repo)&quot;</span><br><span class="hljs-string">git</span> <span class="hljs-string">remote</span> <span class="hljs-built_in">set-url</span> <span class="hljs-string">origin</span> <span class="hljs-string">https</span>://<span class="hljs-string">mirrors</span>.<span class="hljs-string">aliyun</span>.<span class="hljs-string">com</span>/<span class="hljs-string">homebrew</span>/<span class="hljs-string">brew</span>.<span class="hljs-string">git</span><br><span class="hljs-string">git</span> <span class="hljs-string">remote</span> <span class="hljs-built_in">get-url</span> <span class="hljs-string">origin</span><br></code></pre></td></tr></table></figure><blockquote><p>如果发现 brew 安装有问题，无法搜索到任何软件包，则尝试运行 <code>brew doctor</code> 命令获取解决方案。</p></blockquote></li><li><p>设置双拼<strong>自然码</strong>方案。进入 <strong>设置-&gt;键盘-&gt;输入法</strong>，选择<strong>简体双拼</strong>，并在终端键入以下命令以启动<strong>自然码</strong>方案：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">COPYdefaults write com<span class="hljs-selector-class">.apple</span><span class="hljs-selector-class">.inputmethod</span><span class="hljs-selector-class">.CoreChineseEngineFramework</span> shuangpinLayout <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure></li><li><p>安装 <a href="https://code.visualstudio.com/docs/?dv=osx">VSCode for macOS</a>。下载后将其拖入<strong>应用程序文件夹</strong>下。</p></li><li><p>安装 proxychain</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">COPYbrew install proxychains-ng<br>nano <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/etc/</span>proxychains.conf<br>proxychains4 curl -v google.com<br></code></pre></td></tr></table></figure></li><li><p>配置 git。</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs autoit">COPYssh-keygen<br>cat ~/.ssh/id_rsa.pub <span class="hljs-meta"># 获取公钥</span><br><span class="hljs-meta"># 将公钥上传至 github 上</span><br>git config --<span class="hljs-keyword">global</span> user.name Kiprey<br>git config --<span class="hljs-keyword">global</span> user.email Kiprey<span class="hljs-symbol">@qq</span>.com<br></code></pre></td></tr></table></figure></li><li><p>安装 ohmyzsh。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">COPYbrew <span class="hljs-keyword">install </span>wget<br><span class="hljs-keyword">sh </span>-c <span class="hljs-string">&quot;$(wget -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</span><br></code></pre></td></tr></table></figure><p>之后安装常用插件</p><ul><li><p>autojump</p><p>执行以下命令下载：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">COPYgit clone git:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/joelthelion/</span>autojump.git<br>cd autojump<br>./install.py<br></code></pre></td></tr></table></figure><p>之后 <code>nano ~/.zshrc</code>，将以下内容添加至文件末尾：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">COPY</span>[[ -s <span class="hljs-regexp">/Users/</span>kiprey<span class="hljs-regexp">/.autojump/</span>etc<span class="hljs-regexp">/profile.d/</span>autojump.sh ]] &amp;&amp; <span class="hljs-keyword">source</span> <span class="hljs-regexp">/Users/</span>kiprey<span class="hljs-regexp">/.autojump/</span>etc<span class="hljs-regexp">/profile.d/</span>autojump.sh<br>autoload -U compinit &amp;&amp; compinit -u<br></code></pre></td></tr></table></figure><p>然后将 <code>autojump</code> 添加进 <code>.zshrc</code> 中的 plugin 字段中：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">COPY</span><span class="language-bash"><span class="hljs-comment"># Which plugins would you like to load?</span></span><br><span class="hljs-comment"># Standard plugins can be found in $ZSH/plugins/</span><br><span class="hljs-comment"># Custom plugins may be added to $ZSH_CUSTOM/plugins/</span><br><span class="hljs-comment"># Example format: plugins=(rails git textmate ruby lighthouse)</span><br><span class="hljs-comment"># Add wisely, as too many plugins slow down shell startup.</span><br>plugins=(git autojump)<br></code></pre></td></tr></table></figure></li><li><p>zsh-autosuggestions 与 zsh-syntax-highlighting</p><p>下载：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">COPYgit clone git:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/zsh-users/</span>zsh-autosuggestions <span class="hljs-variable">$ZSH_CUSTOM</span><span class="hljs-regexp">/plugins/</span>zsh-autosuggestions<br>git clone git:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/zsh-users/</span>zsh-syntax-highlighting <span class="hljs-variable">$ZSH_CUSTOM</span><span class="hljs-regexp">/plugins/</span>zsh-syntax-highlighting<br></code></pre></td></tr></table></figure><p>将 <code>zsh-autosuggestions</code> 和 <code>zsh-syntax-highlighting</code> 添加进 <code>.zshrc</code> 中的 plugin 字段中：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">COPYplugins</span><span class="hljs-operator">=</span>(git autojump zsh-autosuggestions zsh-syntax-highlighting)<br></code></pre></td></tr></table></figure></li></ul><p>插件安装完成后，最后执行 <code>source ~/.zshrc</code> 重新载入新的 zsh 配置以启动插件。</p></li><li><p>安装 ShadowSocksR。下载地址：<a href="https://github.com/qinyuhang/ShadowsocksX-NG-R/releases">shadowsocksX-NG-R - github</a>，支持订阅地址。</p></li></ol><h2 id="四、扩容分区"><a href="#四、扩容分区" class="headerlink" title="四、扩容分区"></a>四、扩容分区</h2><p>如果发现 MacOS 磁盘大小不够，需要扩容一下虚拟磁盘，则按照以下步骤进行：</p><ol><li><p>先去 Vmware 那里扩容一下磁盘</p></li><li><p>在 MacOS 中，执行 <code>diskutil list</code> 查看当前磁盘情况：</p><img src="/pages/2023/%5B%E8%BD%AC%E8%BD%BD%5D-Win10-Vmware-Workstation-16-%E5%AE%89%E8%A3%85-macOS-%E8%AE%B0%E5%BD%95/image-20211213105925673.png" class="" title="image-20211213105925673"><p>其中，disk0 为整个磁盘，而 disk0s2 分区即 MacOS 此时使用的空间，因此我们需要扩容 disk0s2。</p></li><li><p>尝试扩展磁盘。</p><p>网络上都使用的是这个命令：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">COPYdiskutil</span> resizeVolume disk0s2 <span class="hljs-number">50</span>GB<br></code></pre></td></tr></table></figure><blockquote><p>其中 disk0s2 为待扩容磁盘，50GB 为目标扩容大小。</p></blockquote><p>但是由于本人的 disk0s2 为 <code>Apple_APFS</code> 类型，因此上述命令不可使用。</p><p>需要使用以下命令：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">COPYdiskutil</span> apfs resizeContainer disk0s2 <span class="hljs-number">70</span>GB<br></code></pre></td></tr></table></figure><p>之后就开始扩容：</p><img src="/pages/2023/%5B%E8%BD%AC%E8%BD%BD%5D-Win10-Vmware-Workstation-16-%E5%AE%89%E8%A3%85-macOS-%E8%AE%B0%E5%BD%95/image-20211213110427580.png" class="" title="image-20211213110427580"></li><li><p>扩容成功</p><img src="/pages/2023/%5B%E8%BD%AC%E8%BD%BD%5D-Win10-Vmware-Workstation-16-%E5%AE%89%E8%A3%85-macOS-%E8%AE%B0%E5%BD%95/image-20211213111727333.png" class="" title="image-20211213111727333"></li></ol><h2 id="五、关闭系统完整性保护"><a href="#五、关闭系统完整性保护" class="headerlink" title="五、关闭系统完整性保护"></a>五、关闭系统完整性保护</h2><p>MacOS 中的系统完整性保护(<strong>SIP</strong>)，会限制住 root 用户的权限，因此需要将其关闭。</p><blockquote><p>见过用 root 权限 lldb attach 其他进程时，被拒绝的快乐嘛…</p></blockquote><p>最简单的关闭方式，莫过于上面在一开始安装时就将其关闭。</p><p>但要是当时安装时忘记关闭，那么现在去关闭 SIP 就会稍微折腾一点…</p><ol><li><p>设置虚拟机 CD&#x2F;DVD 路径为原先的 MacOS 安装镜像：</p><img src="/pages/2023/%5B%E8%BD%AC%E8%BD%BD%5D-Win10-Vmware-Workstation-16-%E5%AE%89%E8%A3%85-macOS-%E8%AE%B0%E5%BD%95/image-20211213130817589.png" class="" title="image-20211213130817589"></li></ol><p>之后，进入虚拟机 BIOS</p><img src="/pages/2023/%5B%E8%BD%AC%E8%BD%BD%5D-Win10-Vmware-Workstation-16-%E5%AE%89%E8%A3%85-macOS-%E8%AE%B0%E5%BD%95/image-20211213131013230.png" class="" title="image-20211213131013230"><p>选择以 CD 为启动盘：</p><img src="/pages/2023/%5B%E8%BD%AC%E8%BD%BD%5D-Win10-Vmware-Workstation-16-%E5%AE%89%E8%A3%85-macOS-%E8%AE%B0%E5%BD%95/image-20211213131148295.png" class="" title="image-20211213131148295"><p>之后在启动后的界面，进入 <strong>实用工具-&gt;终端</strong> 下，键入 <code>csrutil disable</code> 命令并重启虚拟机，即可关闭 SIP。</p><img src="/pages/2023/%5B%E8%BD%AC%E8%BD%BD%5D-Win10-Vmware-Workstation-16-%E5%AE%89%E8%A3%85-macOS-%E8%AE%B0%E5%BD%95/image-20211213113443227.png" class="" title="image-20211213113443227">]]></content>
    
    
    <categories>
      
      <category>虚拟机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>macOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>test</title>
    <link href="/pages/2023/test.html"/>
    <url>/pages/2023/test.html</url>
    
    <content type="html"><![CDATA[<h2 id="test-for-pictures"><a href="#test-for-pictures" class="headerlink" title="test for pictures"></a>test for pictures</h2><img src="/pages/2023/test/fluid.png" class="">]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>test</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用hexo和github搭建静态博客</title>
    <link href="/pages/2023/%E4%BD%BF%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2.html"/>
    <url>/pages/2023/%E4%BD%BF%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2.html</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>使用hexo搭建静态博客并部署到GitHub上 </p><p><a href="https://hexo.io/zh-cn/docs/">官方文档</a></p><span id="more"></span><h1 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol><li>下载git</li><li>安装nodejs</li></ol><h2 id="本地步骤"><a href="#本地步骤" class="headerlink" title="本地步骤"></a>本地步骤</h2><p>创建一个文件夹（这里称作blog）</p><p>回到上一级目录：</p><ul><li><p>安装Hexo</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g hexo-cli<br></code></pre></td></tr></table></figure></li></ul><p>进入blog</p><ul><li><p>执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo init<br>npm install<br>npm install --save hexo-depolyer-git<br></code></pre></td></tr></table></figure></li><li><p>配置<code>_config.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">&#x27;git&#x27;</span><br>  <span class="hljs-attr">repository:</span> <span class="hljs-string">https://github.com/&lt;github用户名&gt;/&lt;github用户名&gt;.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">gh-pages</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="GitHub步骤"><a href="#GitHub步骤" class="headerlink" title="GitHub步骤"></a>GitHub步骤</h2><ul><li>创建仓库<code>&lt;github用户名&gt;.github.io</code>，设为公共仓库</li><li>将blog文件夹push到仓库</li><li>在本地执行<code>hexo g</code></li><li>在仓库的<code>settings-Pages</code>将<code>branch</code>设为<code>gh-pages</code></li></ul><p>本地执行<code>hexo d</code></p><h1 id="安装fluid主题"><a href="#安装fluid主题" class="headerlink" title="安装fluid主题"></a>安装fluid主题</h1><p>fluid是在<a href="https://github.com/fluid-dev/hexo-theme-fluid">GitHub上开源</a>的一款主题</p><p>在博客文件夹执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install --save hexo-theme-fluid<br></code></pre></td></tr></table></figure><p>然后在博客目录下创建 <code>_config.fluid.yml</code>，将主题的 <a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml">_config.yml</a> 内容复制进去。</p><h1 id="解决md插入图片"><a href="#解决md插入图片" class="headerlink" title="解决md插入图片"></a>解决md插入图片</h1><p>使用Typora作为markdown编辑器</p><ul><li><p>typora在偏好设置中将图片路径设置为<code>./$&#123;filename&#125;/</code></p></li><li><p>安装<code>hexo-rederer-marked</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-renderer-marked<br></code></pre></td></tr></table></figure></li><li><p>更改<code>_config.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></li><li><p>安装插件<code>hexo-image-link</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-image-link --save<br></code></pre></td></tr></table></figure></li></ul><h1 id="解决标题特殊字符"><a href="#解决标题特殊字符" class="headerlink" title="解决标题特殊字符"></a>解决标题特殊字符</h1><p>将标题用<code>&#39; &#39;</code>围起来即可。</p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
